// scripts/insertar/menu-productos.js - MEN√ö INTERACTIVO PRINCIPAL
const { PrismaClient } = require('@prisma/client');
const { exec } = require('child_process');
const { promisify } = require('util');
const prisma = new PrismaClient();
const execAsync = promisify(exec);

// Banner principal
function mostrarBanner() {
  console.clear();
  console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üåø TULUM AROMATERAPIA üåø                  ‚ïë
‚ïë                                                              ‚ïë
‚ïë              Sistema de Gesti√≥n de Productos                 ‚ïë
‚ïë                     Men√∫ Interactivo                         ‚ïë
‚ïë                                                              ‚ïë
‚ïë                      Versi√≥n 2.0                            ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
`);
}

// Funci√≥n para obtener estado del sistema
async function obtenerEstadoSistema() {
  try {
    const stats = {
      productos: await prisma.producto.count({ where: { activo: true } }),
      categorias: await prisma.categoria.count(),
      stock: await prisma.stock.count({ where: { productoId: { not: null } } }),
      ventas: await prisma.itemVenta.count()
    };
    
    return stats;
  } catch (error) {
    return { productos: 0, categorias: 0, stock: 0, ventas: 0, error: true };
  }
}

// Funci√≥n para mostrar estado actual
async function mostrarEstadoActual() {
  console.log('üìä Estado actual del sistema:\n');
  
  const estado = await obtenerEstadoSistema();
  
  if (estado.error) {
    console.log('   ‚ùå Error conectando a la base de datos');
    console.log('   üí° Verificar conexi√≥n y variables de entorno\n');
    return false;
  }
  
  console.log(`   üì¶ Productos activos: ${estado.productos}`);
  console.log(`   üìÇ Categor√≠as: ${estado.categorias}`);
  console.log(`   üìä Registros de stock: ${estado.stock}`);
  console.log(`   üõí Ventas registradas: ${estado.ventas}`);
  
  // Determinar estado general
  let estadoGeneral = 'üî¥ VAC√çO';
  if (estado.productos > 0 && estado.categorias > 0) {
    estadoGeneral = estado.ventas > 0 ? 'üü¢ OPERATIVO' : 'üü° CONFIGURADO';
  }
  
  console.log(`   üéØ Estado: ${estadoGeneral}\n`);
  
  return true;
}

// Funci√≥n para ejecutar comando con feedback
async function ejecutarComando(comando, descripcion) {
  console.log(`\nüöÄ ${descripcion}...`);
  console.log(`üìù Comando: ${comando}\n`);
  
  try {
    const { stdout, stderr } = await execAsync(comando, { 
      cwd: process.cwd(),
      maxBuffer: 1024 * 1024 * 10 // 10MB buffer
    });
    
    if (stdout) console.log(stdout);
    if (stderr) console.log('‚ö†Ô∏è Warnings:', stderr);
    
    return true;
  } catch (error) {
    console.error('‚ùå Error ejecutando comando:', error.message);
    return false;
  }
}

// Funci√≥n para pausar y continuar
function pausar(mensaje = '\nPresiona Enter para continuar...') {
  return new Promise((resolve) => {
    const readline = require('readline');
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    
    rl.question(mensaje, () => {
      rl.close();
      resolve();
    });
  });
}

// Men√∫ principal
async function mostrarMenuPrincipal() {
  mostrarBanner();
  
  const conectado = await mostrarEstadoActual();
  
  if (!conectado) {
    console.log('‚ùå No se puede conectar a la base de datos');
    console.log('üí° Verificar configuraci√≥n antes de continuar\n');
  }
  
  console.log('üéØ Selecciona una opci√≥n:\n');
  console.log('   1Ô∏è‚É£  Setup completo (nuevo sistema)');
  console.log('   2Ô∏è‚É£  Reset completo + Setup autom√°tico (NUEVO)');
  console.log('   3Ô∏è‚É£  Insertar/actualizar productos');
  console.log('   4Ô∏è‚É£  Gestionar precios');
  console.log('   5Ô∏è‚É£  Gestionar im√°genes');
  console.log('   6Ô∏è‚É£  Crear recetas y asociaciones (NUEVO)');
  console.log('   7Ô∏è‚É£  Auditor√≠a del sistema');
  console.log('   8Ô∏è‚É£  Cargar stock inicial');
  console.log('   9Ô∏è‚É£  Herramientas avanzadas');
  console.log('   üî•  Reset del sistema (PELIGROSO)');
  console.log('   üìö  Ayuda y documentaci√≥n');
  console.log('   0Ô∏è‚É£  Salir\n');
  
  return obtenerOpcion('Selecciona una opci√≥n: ');
}

// Funci√≥n para obtener input del usuario
function obtenerOpcion(mensaje) {
  return new Promise((resolve) => {
    const readline = require('readline');
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    
    rl.question(mensaje, (respuesta) => {
      rl.close();
      resolve(respuesta.trim());
    });
  });
}

// Opci√≥n 1: Setup completo
async function setupCompleto() {
  console.clear();
  console.log('üöÄ === SETUP COMPLETO ===\n');
  
  console.log('Este proceso configurar√° el sistema completo con:');
  console.log('‚úÖ 16 categor√≠as con im√°genes');
  console.log('‚úÖ 300+ productos optimizados');
  console.log('‚úÖ Precios por categor√≠a');
  console.log('‚úÖ Sistema de im√°genes');
  
  const confirmar = await obtenerOpcion('\n¬øContinuar? (s/N): ');
  
  if (confirmar.toLowerCase() === 's' || confirmar.toLowerCase() === 'si') {
    const exito = await ejecutarComando(
      'node scripts/insertar/setup-completo-productos.js --si',
      'Ejecutando setup completo'
    );
    
    if (exito) {
      console.log('\nüéâ Setup completado exitosamente!');
      console.log('üí° Pr√≥ximos pasos:');
      console.log('   1. Subir im√°genes reales a public/images/categorias/');
      console.log('   2. Cargar stock inicial por sucursal');
      console.log('   3. Verificar resultado con auditor√≠a');
    }
  } else {
    console.log('‚ùå Setup cancelado');
  }
  
  await pausar();
}

// Opci√≥n 2: Reset completo + Setup autom√°tico
async function resetCompletoYSetup() {
  console.clear();
  console.log('üî• === RESET COMPLETO + SETUP AUTOM√ÅTICO ===\n');
  
  console.log('‚ö†Ô∏è ATENCI√ìN: Esta opci√≥n es MUY DESTRUCTIVA');
  console.log('üóëÔ∏è Eliminar√° COMPLETAMENTE:');
  console.log('   ‚Ä¢ Todas las ventas y facturas');
  console.log('   ‚Ä¢ Todas las contingencias y conciliaciones'); 
  console.log('   ‚Ä¢ Todos los productos, categor√≠as y recetas');
  console.log('   ‚Ä¢ Todo el stock y movimientos');
  console.log('   ‚Ä¢ TODO el contenido del sistema\n');
  
  console.log('‚úÖ Y despu√©s crear√° DESDE CERO:');
  console.log('   ‚Ä¢ 17 categor√≠as con im√°genes');
  console.log('   ‚Ä¢ 300+ productos optimizados');
  console.log('   ‚Ä¢ Precios por categor√≠a');
  console.log('   ‚Ä¢ Sistema de im√°genes configurado\n');
  
  const confirmar = await obtenerOpcion('‚ö†Ô∏è ¬øEst√° SEGURO? Escriba "RESET COMPLETO": ');
  
  if (confirmar === 'RESET COMPLETO') {
    const exito = await ejecutarComando(
      'node scripts/insertar/reset-completo-y-setup.js',
      'Ejecutando reset completo y setup autom√°tico'
    );
    
    if (exito) {
      console.log('\nüéâ Reset completo y setup finalizados!');
      console.log('üí° Pr√≥ximo paso recomendado:');
      console.log('   Crear recetas: Opci√≥n 6 del men√∫');
    }
  } else {
    console.log('‚ùå Reset cancelado - confirmaci√≥n incorrecta');
  }
  
  await pausar();
}

// Opci√≥n 6: Crear recetas
async function crearRecetas() {
  console.clear();
  console.log('üß™ === CREAR RECETAS Y ASOCIACIONES ===\n');
  
  console.log('Este proceso crear√°:');
  console.log('‚úÖ Recetas de producci√≥n para cada producto');
  console.log('‚úÖ Ingredientes y cantidades necesarias');
  console.log('‚úÖ Asociaciones producto-receta autom√°ticas');
  console.log('‚ö†Ô∏è Limpiar√° recetas existentes primero\n');
  
  const confirmar = await obtenerOpcion('¬øContinuar con la creaci√≥n de recetas? (s/N): ');
  
  if (confirmar.toLowerCase() === 's' || confirmar.toLowerCase() === 'si') {
    const exito = await ejecutarComando(
      'node scripts/insertar/crear-recetas-productos.js',
      'Creando recetas y asociaciones'
    );
    
    if (exito) {
      console.log('\nüéâ Recetas creadas exitosamente!');
      console.log('üí° Ahora puedes:');
      console.log('   1. Cargar materia prima (insumos)');
      console.log('   2. Cargar stock inicial');
      console.log('   3. Comenzar a producir');
    }
  } else {
    console.log('‚ùå Creaci√≥n de recetas cancelada');
  }
  
  await pausar();
}
async function insertarProductos() {
  console.clear();
  console.log('üì¶ === INSERTAR/ACTUALIZAR PRODUCTOS ===\n');
  
  console.log('Opciones disponibles:');
  console.log('1. Insertar productos definitivos');
  console.log('2. Solo crear categor√≠as');
  console.log('3. Volver al men√∫ principal');
  
  const opcion = await obtenerOpcion('\nSelecciona (1-3): ');
  
  switch (opcion) {
    case '1':
      await ejecutarComando(
        'node scripts/insertar/insertar-productos-finales.js',
        'Insertando productos definitivos'
      );
      break;
      
    case '2':
      await ejecutarComando(
        'node scripts/insertar/insertar-categorias.js',
        'Creando categor√≠as'
      );
      break;
      
    case '3':
      return;
      
    default:
      console.log('‚ùå Opci√≥n inv√°lida');
  }
  
  await pausar();
}

// Opci√≥n 3: Gestionar precios
async function gestionarPrecios() {
  console.clear();
  console.log('üí∞ === GESTIONAR PRECIOS ===\n');
  
  console.log('Opciones disponibles:');
  console.log('1. Verificar precios actuales');
  console.log('2. Actualizar precios');
  console.log('3. Generar reporte de precios');
  console.log('4. Volver al men√∫ principal');
  
  const opcion = await obtenerOpcion('\nSelecciona (1-4): ');
  
  switch (opcion) {
    case '1':
      await ejecutarComando(
        'node scripts/insertar/migrar-precios-productos.js --verificar',
        'Verificando precios actuales'
      );
      break;
      
    case '2':
      await ejecutarComando(
        'node scripts/insertar/migrar-precios-productos.js --actualizar',
        'Actualizando precios'
      );
      break;
      
    case '3':
      await ejecutarComando(
        'node scripts/insertar/migrar-precios-productos.js --reporte',
        'Generando reporte de precios'
      );
      break;
      
    case '4':
      return;
      
    default:
      console.log('‚ùå Opci√≥n inv√°lida');
  }
  
  await pausar();
}

// Opci√≥n 4: Gestionar im√°genes
async function gestionarImagenes() {
  console.clear();
  console.log('üñºÔ∏è === GESTIONAR IM√ÅGENES ===\n');
  
  console.log('Opciones disponibles:');
  console.log('1. Configurar sistema de im√°genes completo');
  console.log('2. Verificar im√°genes existentes');
  console.log('3. Sincronizar productos con im√°genes');
  console.log('4. Generar placeholders temporales');
  console.log('5. Volver al men√∫ principal');
  
  const opcion = await obtenerOpcion('\nSelecciona (1-5): ');
  
  switch (opcion) {
    case '1':
      await ejecutarComando(
        'node scripts/insertar/gestionar-imagenes-categorias.js',
        'Configurando sistema de im√°genes'
      );
      break;
      
    case '2':
      await ejecutarComando(
        'node scripts/insertar/gestionar-imagenes-categorias.js --verificar',
        'Verificando im√°genes existentes'
      );
      break;
      
    case '3':
      await ejecutarComando(
        'node scripts/insertar/gestionar-imagenes-categorias.js --sincronizar-productos',
        'Sincronizando productos con im√°genes'
      );
      break;
      
    case '4':
      await ejecutarComando(
        'node scripts/insertar/gestionar-imagenes-categorias.js --generar-placeholders',
        'Generando script de placeholders'
      );
      break;
      
    case '5':
      return;
      
    default:
      console.log('‚ùå Opci√≥n inv√°lida');
  }
  
  await pausar();
}

// Opci√≥n 5: Auditor√≠a
async function auditoriaSistema() {
  console.clear();
  console.log('üîç === AUDITOR√çA DEL SISTEMA ===\n');
  
  console.log('Opciones disponibles:');
  console.log('1. Verificaci√≥n r√°pida');
  console.log('2. Auditor√≠a completa');
  console.log('3. Exportar reporte completo');
  console.log('4. Volver al men√∫ principal');
  
  const opcion = await obtenerOpcion('\nSelecciona (1-4): ');
  
  switch (opcion) {
    case '1':
      await ejecutarComando(
        'node scripts/insertar/auditoria-productos.js --rapido',
        'Ejecutando verificaci√≥n r√°pida'
      );
      break;
      
    case '2':
      await ejecutarComando(
        'node scripts/insertar/auditoria-productos.js --completo',
        'Ejecutando auditor√≠a completa'
      );
      break;
      
    case '3':
      await ejecutarComando(
        'node scripts/insertar/auditoria-productos.js --exportar',
        'Exportando reporte completo'
      );
      break;
      
    case '4':
      return;
      
    default:
      console.log('‚ùå Opci√≥n inv√°lida');
  }
  
  await pausar();
}

// Opci√≥n 6: Cargar stock
async function cargarStock() {
  console.clear();
  console.log('üì¶ === CARGAR STOCK INICIAL ===\n');
  
  console.log('Este proceso cargar√° stock inicial para todos los productos activos.');
  console.log('‚ö†Ô∏è Verificar que los productos est√©n configurados primero.\n');
  
  const confirmar = await obtenerOpcion('¬øContinuar con la carga de stock? (s/N): ');
  
  if (confirmar.toLowerCase() === 's' || confirmar.toLowerCase() === 'si') {
    await ejecutarComando(
      'node scripts/insertar/cargar-stock-inicial.js',
      'Cargando stock inicial'
    );
  } else {
    console.log('‚ùå Carga de stock cancelada');
  }
  
  await pausar();
}

// Opci√≥n 7: Herramientas avanzadas
async function herramientasAvanzadas() {
  console.clear();
  console.log('üîß === HERRAMIENTAS AVANZADAS ===\n');
  
  console.log('Opciones disponibles:');
  console.log('1. Insertar materia prima (insumos)');
  console.log('2. Insertar insumos PDV');
  console.log('3. Crear recetas de productos');
  console.log('4. Generar usuarios y roles');
  console.log('5. Configurar sucursales');
  console.log('6. Volver al men√∫ principal');
  
  const opcion = await obtenerOpcion('\nSelecciona (1-6): ');
  
  switch (opcion) {
    case '1':
      await ejecutarComando(
        'node scripts/insertar/insertar-materia-prima.js',
        'Insertando materia prima'
      );
      break;
      
    case '2':
      await ejecutarComando(
        'node scripts/insertar/insertar-insumos-pdv.js',
        'Insertando insumos PDV'
      );
      break;
      
    case '3':
      await ejecutarComando(
        'node scripts/insertar/insertar-recetas.js',
        'Creando recetas de productos'
      );
      break;
      
    case '4':
      await ejecutarComando(
        'node prisma/seed2.js',
        'Generando usuarios y roles b√°sicos'
      );
      break;
      
    case '5':
      console.log('üí° Las sucursales se configuran desde el panel de administraci√≥n');
      console.log('   Ir a /admin/ubicaciones una vez que el sistema est√© funcionando');
      break;
      
    case '6':
      return;
      
    default:
      console.log('‚ùå Opci√≥n inv√°lida');
  }
  
  await pausar();
}

// Opci√≥n 8: Reset del sistema
async function resetSistema() {
  console.clear();
  console.log('üö® === RESET DEL SISTEMA ===\n');
  
  console.log('‚ö†Ô∏è  ADVERTENCIA: Esta operaci√≥n es DESTRUCTIVA\n');
  
  console.log('Opciones disponibles:');
  console.log('1. Reset selectivo mejorado (recomendado)');
  console.log('2. Reset completo SIN ventas');
  console.log('3. Reset completo CON ventas (PELIGROSO)');
  console.log('4. Reset de emergencia (fuerza eliminaci√≥n)');
  console.log('5. Volver al men√∫ principal (recomendado)');
  
  const opcion = await obtenerOpcion('\nSelecciona (1-5): ');
  
  switch (opcion) {
    case '1':
      await ejecutarComando(
        'node scripts/insertar/reset-sistema-productos.js --selectivo',
        'Ejecutando reset selectivo mejorado'
      );
      break;
      
    case '2':
      console.log('\n‚ö†Ô∏è Confirmaci√≥n requerida para reset completo');
      const confirmar = await obtenerOpcion('Escriba "CONFIRMAR RESET" para continuar: ');
      
      if (confirmar === 'CONFIRMAR RESET') {
        await ejecutarComando(
          'node scripts/insertar/reset-sistema-productos.js --forzar',
          'Ejecutando reset completo sin ventas'
        );
      } else {
        console.log('‚ùå Reset cancelado - confirmaci√≥n incorrecta');
      }
      break;
      
    case '3':
      console.log('\nüö® PELIGRO: Esto eliminar√° TODO incluyendo ventas');
      const confirmarPeligroso = await obtenerOpcion('Escriba "ELIMINAR TODO" para continuar: ');
      
      if (confirmarPeligroso === 'ELIMINAR TODO') {
        await ejecutarComando(
          'node scripts/insertar/reset-sistema-productos.js --forzar --incluir-ventas',
          'Ejecutando reset completo con ventas'
        );
      } else {
        console.log('‚ùå Reset cancelado - confirmaci√≥n incorrecta');
      }
      break;
      
    case '4':
      console.log('\nüö® RESET DE EMERGENCIA: Deshabilita foreign keys temporalmente');
      const confirmarEmergencia = await obtenerOpcion('Escriba "RESET EMERGENCIA" para continuar: ');
      
      if (confirmarEmergencia === 'RESET EMERGENCIA') {
        await ejecutarComando(
          'node scripts/insertar/reset-sistema-productos.js --emergencia',
          'Ejecutando reset de emergencia'
        );
      } else {
        console.log('‚ùå Reset de emergencia cancelado');
      }
      break;
      
    case '5':
      return;
      
    default:
      console.log('‚ùå Opci√≥n inv√°lida');
  }
  
  await pausar();
}

// Opci√≥n 9: Ayuda
async function mostrarAyuda() {
  console.clear();
  console.log('üìö === AYUDA Y DOCUMENTACI√ìN ===\n');
  
  console.log('üéØ Workflows recomendados:\n');
  
  console.log('üìã Para sistema NUEVO:');
  console.log('   1. Setup completo');
  console.log('   2. Subir im√°genes a public/images/categorias/');
  console.log('   3. Cargar stock inicial');
  console.log('   4. Verificar con auditor√≠a\n');
  
  console.log('üîÑ Para sistema EXISTENTE:');
  console.log('   1. Auditor√≠a del sistema');
  console.log('   2. Insertar/actualizar productos');
  console.log('   3. Gestionar precios');
  console.log('   4. Verificar con auditor√≠a\n');
  
  console.log('üõ†Ô∏è Comandos manuales √∫tiles:\n');
  console.log('   # Verificaci√≥n r√°pida');
  console.log('   node scripts/insertar/auditoria-productos.js --rapido\n');
  
  console.log('   # Setup completo autom√°tico');
  console.log('   node scripts/insertar/setup-completo-productos.js --si\n');
  
  console.log('   # Verificar im√°genes');
  console.log('   node scripts/insertar/gestionar-imagenes-categorias.js --verificar\n');
  
  console.log('üìÅ Archivos importantes:');
  console.log('   ‚Ä¢ public/images/README.md - Gu√≠a de im√°genes');
  console.log('   ‚Ä¢ scripts/insertar/ - Todos los scripts');
  console.log('   ‚Ä¢ prisma/schema.prisma - Esquema de base de datos\n');
  
  console.log('üÜò En caso de problemas:');
  console.log('   1. Verificar conexi√≥n a BD: npm run db:status');
  console.log('   2. Ejecutar auditor√≠a: opci√≥n 5 del men√∫');
  console.log('   3. Consultar documentaci√≥n completa');
  console.log('   4. Hacer backup antes de reset\n');
  
  await pausar();
}

// Funci√≥n principal del men√∫
async function ejecutarMenu() {
  let continuar = true;
  
  while (continuar) {
    try {
      const opcion = await mostrarMenuPrincipal();
      
      switch (opcion) {
        case '1':
          await setupCompleto();
          break;
          
        case '2':
          await insertarProductos();
          break;
          
        case '3':
          await gestionarPrecios();
          break;
          
        case '4':
          await gestionarImagenes();
          break;
          
        case '5':
          await auditoriaSistema();
          break;
          
        case '6':
          await cargarStock();
          break;
          
        case '7':
          await herramientasAvanzadas();
          break;
          
        case '8':
          await resetSistema();
          break;
          
        case '9':
          await mostrarAyuda();
          break;
          
        case '0':
          continuar = false;
          console.log('\nüëã ¬°Hasta luego! Sistema de productos Tulum');
          break;
          
        default:
          console.log('\n‚ùå Opci√≥n inv√°lida. Intenta nuevamente.');
          await pausar();
      }
      
    } catch (error) {
      console.error('\nüí• Error en el men√∫:', error.message);
      await pausar('\nPresiona Enter para continuar...');
    }
  }
}

// Funci√≥n de inicio
async function iniciar() {
  try {
    // Verificar si estamos en el directorio correcto
    const fs = require('fs');
    if (!fs.existsSync('package.json')) {
      console.error('‚ùå Error: Ejecutar desde el directorio ra√≠z del proyecto');
      process.exit(1);
    }
    
    // Ejecutar men√∫ principal
    await ejecutarMenu();
    
  } catch (error) {
    console.error('üí• Error cr√≠tico:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// Ejecutar si es llamado directamente
if (require.main === module) {
  // Verificar argumentos para modo directo
  const args = process.argv.slice(2);
  
  if (args.includes('--ayuda') || args.includes('--help')) {
    console.log(`
üìö Men√∫ Interactivo de Productos Tulum

üöÄ Uso:
   node scripts/insertar/menu-productos.js

üéØ Funcionalidades:
   ‚Ä¢ Setup completo del sistema
   ‚Ä¢ Gesti√≥n de productos y categor√≠as
   ‚Ä¢ Manejo de precios e im√°genes
   ‚Ä¢ Auditor√≠a y mantenimiento
   ‚Ä¢ Herramientas avanzadas
   ‚Ä¢ Reset seguro del sistema

üí° Para usar comandos individuales:
   node scripts/insertar/[script-especifico].js --ayuda
`);
    process.exit(0);
  }
  
  // Iniciar men√∫ interactivo
  iniciar();
}

module.exports = { 
  ejecutarMenu,
  mostrarBanner,
  obtenerEstadoSistema
};