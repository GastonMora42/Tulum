// scripts/insertar/setup-completo-productos.js - SCRIPT MAESTRO
const { PrismaClient } = require('@prisma/client');
const { insertarProductosFinales } = require('./insertar-productos-finales');
const { gestionarImagenes } = require('./gestionar-imagenes-categorias');
const prisma = new PrismaClient();

// Funci√≥n para mostrar banner
function mostrarBanner() {
  console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    TULUM AROMATERAPIA                        ‚ïë
‚ïë                Setup Completo de Productos                   ‚ïë
‚ïë                                                              ‚ïë
‚ïë  üè≠ Productos Definitivos                                    ‚ïë
‚ïë  üìÇ Categor√≠as con Im√°genes                                  ‚ïë
‚ïë  üè™ Listo para Producci√≥n                                    ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
`);
}

// Funci√≥n para verificar estado actual del sistema
async function verificarEstadoActual() {
  console.log('üîç Verificando estado actual del sistema...\n');
  
  try {
    // Contar datos existentes
    const productos = await prisma.producto.count();
    const categorias = await prisma.categoria.count();
    const ventas = await prisma.itemVenta.count();
    const stock = await prisma.stock.count({ where: { productoId: { not: null } } });
    const recetas = await prisma.productoReceta.count();
    
    console.log('üìä Estado actual:');
    console.log(`   üì¶ Productos: ${productos}`);
    console.log(`   üìÇ Categor√≠as: ${categorias}`);
    console.log(`   üõí Ventas: ${ventas}`);
    console.log(`   üì¶ Stock: ${stock}`);
    console.log(`   üìã Recetas: ${recetas}`);
    
    // Verificar productos por categor√≠a
    if (productos > 0) {
      const productosPorCategoria = await prisma.categoria.findMany({
        include: {
          _count: {
            select: { productos: true }
          }
        },
        orderBy: { nombre: 'asc' }
      });
      
      console.log('\nüìÇ Productos por categor√≠a actual:');
      productosPorCategoria.forEach(cat => {
        if (cat._count.productos > 0) {
          console.log(`   - ${cat.nombre}: ${cat._count.productos} productos`);
        }
      });
    }
    
    const hayDependencias = ventas > 0 || stock > 0 || recetas > 0;
    
    return {
      productos,
      categorias,
      ventas,
      stock,
      recetas,
      hayDependencias
    };
    
  } catch (error) {
    console.error('‚ùå Error verificando estado:', error);
    throw error;
  }
}

// Funci√≥n para mostrar plan de acci√≥n
function mostrarPlanAccion(estado, forzarLimpieza) {
  console.log('\nüìã Plan de acci√≥n:');
  
  if (estado.hayDependencias && !forzarLimpieza) {
    console.log('   ‚ö†Ô∏è Se detectaron datos existentes (ventas, stock, recetas)');
    console.log('   üîÑ Los productos existentes se DESACTIVAR√ÅN');
    console.log('   ‚úÖ Los nuevos productos se INSERTAR√ÅN como activos');
    console.log('   üí° Para eliminar completamente usar --forzar');
  } else if (forzarLimpieza) {
    console.log('   üóëÔ∏è MODO FORZAR: Se eliminar√°n TODOS los datos');
    console.log('   ‚ö†Ô∏è Esto incluye ventas, stock y recetas');
    console.log('   üÜï Se crear√° todo desde cero');
  } else {
    console.log('   üÜï No hay datos existentes');
    console.log('   ‚úÖ Se crear√° todo desde cero');
  }
  
  console.log('\nüîÑ Pasos a ejecutar:');
  console.log('   1Ô∏è‚É£ Limpiar/desactivar productos existentes');
  console.log('   2Ô∏è‚É£ Crear categor√≠as con im√°genes');
  console.log('   3Ô∏è‚É£ Insertar productos definitivos');
  console.log('   4Ô∏è‚É£ Configurar sistema de im√°genes');
  console.log('   5Ô∏è‚É£ Verificar resultado final');
}

// Funci√≥n para confirmar ejecuci√≥n
function solicitarConfirmacion(estado, forzarLimpieza) {
  return new Promise((resolve) => {
    const readline = require('readline');
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    
    let mensaje = '\n¬øContinuar con el setup? (s/N): ';
    
    if (estado.hayDependencias && forzarLimpieza) {
      mensaje = '\n‚ö†Ô∏è  ATENCI√ìN: Se eliminar√°n datos de producci√≥n. ¬øEst√° SEGURO? (escriba "SI ESTOY SEGURO"): ';
    }
    
    rl.question(mensaje, (respuesta) => {
      rl.close();
      
      if (forzarLimpieza && estado.hayDependencias) {
        resolve(respuesta.trim() === 'SI ESTOY SEGURO');
      } else {
        resolve(respuesta.toLowerCase().trim() === 's' || respuesta.toLowerCase().trim() === 'si');
      }
    });
  });
}

// Funci√≥n para ejecutar setup paso a paso
async function ejecutarSetupCompleto(forzarLimpieza = false) {
  console.log('üöÄ Iniciando setup completo...\n');
  
  const resultados = {
    productos: 0,
    categorias: 0,
    errores: [],
    imagenes: null
  };
  
  try {
    // Paso 1: Insertar productos (incluye limpieza y categor√≠as)
    console.log('1Ô∏è‚É£ === INSERTANDO PRODUCTOS DEFINITIVOS ===');
    const resultadoProductos = await insertarProductosFinales();
    resultados.productos = resultadoProductos.insertados;
    resultados.categorias = resultadoProductos.categorias;
    
    console.log('\n‚úÖ Productos insertados correctamente');
    
    // Paso 2: Configurar sistema de im√°genes
    console.log('\n2Ô∏è‚É£ === CONFIGURANDO SISTEMA DE IM√ÅGENES ===');
    await gestionarImagenes();
    resultados.imagenes = 'configurado';
    
    console.log('\n‚úÖ Sistema de im√°genes configurado');
    
    return resultados;
    
  } catch (error) {
    console.error('‚ùå Error durante el setup:', error);
    resultados.errores.push(error.message);
    throw error;
  }
}

// Funci√≥n para mostrar resumen final
async function mostrarResumenFinal(resultados) {
  console.log('\nüéâ === SETUP COMPLETADO EXITOSAMENTE ===\n');
  
  // Estad√≠sticas finales
  const estadisticasFinales = await verificarEstadoActual();
  
  console.log('üìä Resultado final:');
  console.log(`   ‚úÖ Productos insertados: ${resultados.productos}`);
  console.log(`   ‚úÖ Categor√≠as creadas: ${resultados.categorias}`);
  console.log(`   ‚úÖ Total productos activos: ${estadisticasFinales.productos}`);
  console.log(`   ‚úÖ Sistema de im√°genes: ${resultados.imagenes}`);
  
  // Mostrar muestra de productos por categor√≠a
  console.log('\nüìÇ Productos por categor√≠a (muestra):');
  const categorias = await prisma.categoria.findMany({
    include: {
      productos: {
        where: { activo: true },
        take: 3,
        select: { nombre: true }
      },
      _count: {
        select: { productos: { where: { activo: true } } }
      }
    },
    orderBy: { nombre: 'asc' }
  });
  
  categorias.forEach(categoria => {
    if (categoria._count.productos > 0) {
      console.log(`   üì¶ ${categoria.nombre} (${categoria._count.productos} productos):`);
      categoria.productos.forEach(producto => {
        console.log(`      - ${producto.nombre}`);
      });
      if (categoria._count.productos > 3) {
        console.log(`      ... y ${categoria._count.productos - 3} m√°s`);
      }
    }
  });
  
  // Instrucciones de pr√≥ximos pasos
  console.log('\nüéØ Pr√≥ximos pasos recomendados:');
  console.log('   1Ô∏è‚É£ Subir im√°genes reales a public/images/categorias/');
  console.log('   2Ô∏è‚É£ Ajustar precios en el panel de administraci√≥n');
  console.log('   3Ô∏è‚É£ Configurar stock inicial por sucursal');
  console.log('   4Ô∏è‚É£ Crear recetas de producci√≥n');
  console.log('   5Ô∏è‚É£ Configurar c√≥digos de barras personalizados');
  
  console.log('\nüìÅ Archivos generados:');
  console.log('   - public/images/README.md (instrucciones de im√°genes)');
  console.log('   - scripts/descargar-imagenes-placeholder.sh (im√°genes temporales)');
  
  console.log('\nüí° Comandos √∫tiles:');
  console.log('   - Verificar im√°genes: node scripts/insertar/gestionar-imagenes-categorias.js --verificar');
  console.log('   - Cargar stock inicial: node scripts/insertar/cargar-stock-inicial.js');
  console.log('   - Ver productos: Ir a /admin/productos en la aplicaci√≥n');
}

// Funci√≥n principal
async function setupCompleto() {
  try {
    mostrarBanner();
    
    // Verificar argumentos
    const args = process.argv.slice(2);
    const forzarLimpieza = args.includes('--forzar');
    const saltarConfirmacion = args.includes('--si') || args.includes('-y');
    
    if (forzarLimpieza) {
      console.log('‚ö†Ô∏è MODO FORZAR ACTIVADO - Se eliminar√°n todos los datos\n');
    }
    
    // 1. Verificar estado actual
    const estado = await verificarEstadoActual();
    
    // 2. Mostrar plan de acci√≥n
    mostrarPlanAccion(estado, forzarLimpieza);
    
    // 3. Solicitar confirmaci√≥n (si no se salta)
    if (!saltarConfirmacion) {
      const confirmar = await solicitarConfirmacion(estado, forzarLimpieza);
      if (!confirmar) {
        console.log('\nüö´ Setup cancelado por el usuario');
        process.exit(0);
      }
    }
    
    // 4. Ejecutar setup
    const resultados = await ejecutarSetupCompleto(forzarLimpieza);
    
    // 5. Mostrar resumen final
    await mostrarResumenFinal(resultados);
    
    console.log('\nüéâ Setup completo finalizado exitosamente!');
    
  } catch (error) {
    console.error('\nüí• Error durante el setup completo:', error);
    console.log('\nüîß Posibles soluciones:');
    console.log('   - Verificar conexi√≥n a base de datos');
    console.log('   - Ejecutar: npm run build && npm run db:push');
    console.log('   - Revisar permisos de archivos');
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// Funci√≥n de ayuda
function mostrarAyuda() {
  console.log(`
üìö Uso: node scripts/insertar/setup-completo-productos.js [opciones]

üîß Opciones:
   --forzar     Eliminar todos los datos existentes (peligroso)
   --si, -y     Saltear confirmaciones (modo autom√°tico)
   --ayuda      Mostrar esta ayuda

üìñ Ejemplos:
   # Setup b√°sico (recomendado)
   node scripts/insertar/setup-completo-productos.js
   
   # Setup autom√°tico sin confirmaciones
   node scripts/insertar/setup-completo-productos.js --si
   
   # Eliminar todo y empezar desde cero (PELIGROSO)
   node scripts/insertar/setup-completo-productos.js --forzar

üìã Descripci√≥n:
   Este script configura completamente el sistema de productos:
   - Crea todas las categor√≠as con im√°genes
   - Inserta todos los productos definitivos
   - Configura el sistema de im√°genes
   - Prepara el sistema para producci√≥n

‚ö†Ô∏è  Importante:
   - En modo normal, preserva ventas y stock existente
   - Con --forzar, elimina TODO (solo usar en desarrollo)
   - Siempre hacer backup antes de usar --forzar
`);
}

// Ejecutar si es llamado directamente
if (require.main === module) {
  const args = process.argv.slice(2);
  
  if (args.includes('--ayuda') || args.includes('--help')) {
    mostrarAyuda();
    process.exit(0);
  }
  
  setupCompleto();
}

module.exports = { 
  setupCompleto,
  verificarEstadoActual,
  ejecutarSetupCompleto
};