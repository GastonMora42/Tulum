// scripts/insertar/migrar-categorias-jabones.js - MIGRACI√ìN CATEGOR√çAS JABONES
const { PrismaClient } = require('@prisma/client');
const fs = require('fs').promises;
const prisma = new PrismaClient();

// Configuraci√≥n de la migraci√≥n
const MIGRACION_CONFIG = {
  categoriasAEliminar: [
    'Aceites Esenciales',
    'Aceites escenciales', // Variante con error tipogr√°fico
    'Aguas Arom√°ticas',
    'Aguas Aromaticas', // Sin tilde
    'Velas Arom√°ticas', 
    'Velas Aromaticas', // Sin tilde
    'Fragancias',
    'Jabones' // Categor√≠a general que se dividir√°
  ],
  nuevasCategorias: [
    {
      nombre: 'Jabones S√≥lidos',
      imagen: '/images/categorias/jabones-solidos.webp'
    },
    {
      nombre: 'Jabones L√≠quidos', 
      imagen: '/images/categorias/jabones-liquidos.webp'
    }
  ]
};

// Datos de productos nuevos
const PRODUCTOS_JABONES_SOLIDOS = [
  { nombre: 'JABON SOLIDO AVENA Y COCO', precio: 6900 },
  { nombre: 'JABON SOLIDO CACAO', precio: 6900 },
  { nombre: 'JABON SOLIDO CALENDULA', precio: 6900 },
  { nombre: 'JABON SOLIDO CARBON ACTIVADO', precio: 6900 },
  { nombre: 'JABON SOLIDO LAVANDA', precio: 6900 },
  { nombre: 'JABON SOLIDO MALBEC', precio: 6900 },
  { nombre: 'JABON SOLIDO MANZANILLA', precio: 6900 },
  { nombre: 'JABON SOLIDO OLIVA', precio: 6900 },
  { nombre: 'JABON SOLIDO ROSA MOSQUETA', precio: 6900 },
  { nombre: 'JABON SOLIDO CAFE', precio: 6900 },
  { nombre: 'JABON SOLIDO CENTELLA ASIATICA', precio: 6900 }
];

const PRODUCTOS_JABONES_LIQUIDOS = [
  { nombre: 'JABON LIQUIDO ALOE', precio: 15500 },
  { nombre: 'JABON LIQUIDO CANCUN', precio: 15500 },
  { nombre: 'JABON LIQUIDO CHANDAL', precio: 15500 },
  { nombre: 'JABON LIQUIDO HIBISCUS', precio: 15500 },
  { nombre: 'JABON LIQUIDO MANGO Y MARACUYA', precio: 15500 },
  { nombre: 'JABON LIQUIDO PARADISE', precio: 15500 },
  { nombre: 'JABON LIQUIDO VAINILLA COCO', precio: 15500 }
];

// Funci√≥n para generar c√≥digo de barras EAN-13 v√°lido
function generarCodigoBarrasEAN13(secuencia) {
  const paisArg = '779'; // Argentina
  const empresa = '2025'; // C√≥digo empresa 2025
  const producto = secuencia.toString().padStart(5, '0');
  
  const base = paisArg + empresa + producto;
  
  // Calcular d√≠gito verificador
  let suma = 0;
  for (let i = 0; i < 12; i++) {
    const digito = parseInt(base[i]);
    suma += (i % 2 === 0) ? digito : digito * 3;
  }
  
  const digitoVerificador = (10 - (suma % 10)) % 10;
  return base + digitoVerificador;
}

// Funci√≥n para obtener usuario admin
async function obtenerUsuarioAdmin() {
  const adminUser = await prisma.user.findFirst({
    where: { roleId: 'role-admin' }
  });
  
  if (!adminUser) {
    throw new Error('No se encontr√≥ usuario admin');
  }
  
  return adminUser.id;
}

// Funci√≥n para mostrar banner
function mostrarBanner() {
  console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                üßº MIGRACI√ìN DE CATEGOR√çAS JABONES üßº         ‚ïë
‚ïë                                                              ‚ïë
‚ïë  ‚Ä¢ Elimina categor√≠as obsoletas                             ‚ïë
‚ïë  ‚Ä¢ Crea nuevas categor√≠as: Jabones S√≥lidos y L√≠quidos      ‚ïë
‚ïë  ‚Ä¢ Migra productos existentes y agrega nuevos              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
`);
}

// Funci√≥n para verificar datos existentes
async function verificarDatosExistentes() {
  console.log('üîç Verificando datos existentes...\n');
  
  try {
    // Buscar categor√≠as a eliminar
    const categoriasAEliminar = await prisma.categoria.findMany({
      where: {
        nombre: { in: MIGRACION_CONFIG.categoriasAEliminar }
      },
      include: {
        _count: { select: { productos: true } }
      }
    });
    
    // Buscar productos en esas categor√≠as
    let totalProductosAfectados = 0;
    for (const categoria of categoriasAEliminar) {
      totalProductosAfectados += categoria._count.productos;
    }
    
    // Verificar si ya existen las nuevas categor√≠as
    const categoriasExistentes = await prisma.categoria.findMany({
      where: {
        nombre: { in: ['Jabones S√≥lidos', 'Jabones L√≠quidos'] }
      }
    });
    
    console.log('üìä Estado actual:');
    console.log(`   üóëÔ∏è Categor√≠as a eliminar: ${categoriasAEliminar.length}`);
    console.log(`   üì¶ Productos afectados: ${totalProductosAfectados}`);
    console.log(`   ‚úÖ Categor√≠as nuevas ya existentes: ${categoriasExistentes.length}`);
    
    if (categoriasAEliminar.length > 0) {
      console.log('\nüìã Categor√≠as que se eliminar√°n:');
      categoriasAEliminar.forEach(cat => {
        console.log(`   ‚Ä¢ ${cat.nombre} (${cat._count.productos} productos)`);
      });
    }
    
    if (categoriasExistentes.length > 0) {
      console.log('\n‚ö†Ô∏è Categor√≠as que ya existen:');
      categoriasExistentes.forEach(cat => {
        console.log(`   ‚Ä¢ ${cat.nombre}`);
      });
    }
    
    return {
      categoriasAEliminar,
      totalProductosAfectados,
      categoriasExistentes
    };
    
  } catch (error) {
    console.error('‚ùå Error verificando datos existentes:', error);
    throw error;
  }
}

// Funci√≥n para generar backup
async function generarBackup() {
  console.log('\nüíæ Generando backup antes de la migraci√≥n...');
  
  try {
    const fecha = new Date().toISOString().split('T')[0];
    const hora = new Date().toTimeString().split(' ')[0].replace(/:/g, '-');
    
    // Obtener datos a respaldar
    const categoriasBackup = await prisma.categoria.findMany({
      where: {
        nombre: { in: MIGRACION_CONFIG.categoriasAEliminar }
      },
      include: {
        productos: true
      }
    });
    
    const backup = {
      timestamp: new Date().toISOString(),
      descripcion: 'Backup antes de migraci√≥n de categor√≠as de jabones',
      categorias: categoriasBackup,
      estadisticas: {
        categorias: categoriasBackup.length,
        productos: categoriasBackup.reduce((total, cat) => total + cat.productos.length, 0)
      }
    };
    
    const nombreBackup = `backup-migracion-jabones-${fecha}-${hora}.json`;
    await fs.writeFile(nombreBackup, JSON.stringify(backup, null, 2));
    
    console.log(`   ‚úÖ Backup generado: ${nombreBackup}`);
    console.log(`   üìä ${backup.estadisticas.categorias} categor√≠as, ${backup.estadisticas.productos} productos respaldados`);
    
    return nombreBackup;
  } catch (error) {
    console.error('‚ùå Error generando backup:', error);
    return null;
  }
}

// Funci√≥n para eliminar datos antiguos
async function eliminarDatosAntiguos() {
  console.log('\nüóëÔ∏è Eliminando categor√≠as y productos antiguos...');
  
  try {
    let productosEliminados = 0;
    let categoriasEliminadas = 0;
    
    // Eliminar en transacci√≥n para mantener consistencia
    await prisma.$transaction(async (tx) => {
      // 1. Buscar categor√≠as a eliminar
      const categorias = await tx.categoria.findMany({
        where: {
          nombre: { in: MIGRACION_CONFIG.categoriasAEliminar }
        },
        select: { id: true, nombre: true }
      });
      
      if (categorias.length === 0) {
        console.log('   ‚ÑπÔ∏è No se encontraron categor√≠as para eliminar');
        return;
      }
      
      const categoriaIds = categorias.map(c => c.id);
      
      // 2. Eliminar productos de esas categor√≠as
      const productosResult = await tx.producto.deleteMany({
        where: {
          categoriaId: { in: categoriaIds }
        }
      });
      productosEliminados = productosResult.count;
      
      // 3. Eliminar las categor√≠as
      const categoriasResult = await tx.categoria.deleteMany({
        where: {
          id: { in: categoriaIds }
        }
      });
      categoriasEliminadas = categoriasResult.count;
      
      console.log(`   ‚úÖ ${productosEliminados} productos eliminados`);
      console.log(`   ‚úÖ ${categoriasEliminadas} categor√≠as eliminadas`);
    });
    
    return { productosEliminados, categoriasEliminadas };
  } catch (error) {
    console.error('‚ùå Error eliminando datos antiguos:', error);
    throw error;
  }
}

// Funci√≥n para crear nuevas categor√≠as
async function crearNuevasCategorias() {
  console.log('\nüìÇ Creando nuevas categor√≠as...');
  
  try {
    const categoriasCreadas = [];
    
    for (const categoriaData of MIGRACION_CONFIG.nuevasCategorias) {
      // Verificar si ya existe
      const existente = await prisma.categoria.findFirst({
        where: { nombre: categoriaData.nombre }
      });
      
      if (existente) {
        console.log(`   ‚è≠Ô∏è ${categoriaData.nombre} ya existe, omitiendo...`);
        categoriasCreadas.push(existente);
        continue;
      }
      
      // Crear nueva categor√≠a
      const nuevaCategoria = await prisma.categoria.create({
        data: categoriaData
      });
      
      console.log(`   ‚úÖ ${nuevaCategoria.nombre} creada (ID: ${nuevaCategoria.id})`);
      categoriasCreadas.push(nuevaCategoria);
    }
    
    return categoriasCreadas;
  } catch (error) {
    console.error('‚ùå Error creando categor√≠as:', error);
    throw error;
  }
}

// Funci√≥n para crear productos
async function crearProductos(categorias) {
  console.log('\nüì¶ Creando productos de jabones...');
  
  try {
    const adminUserId = await obtenerUsuarioAdmin();
    
    // Buscar categor√≠as por nombre
    const categoriaSolidos = categorias.find(c => c.nombre === 'Jabones S√≥lidos');
    const categoriaLiquidos = categorias.find(c => c.nombre === 'Jabones L√≠quidos');
    
    if (!categoriaSolidos || !categoriaLiquidos) {
      throw new Error('No se encontraron las categor√≠as de jabones');
    }
    
    let contadorCodigo = 1000; // Empezar desde 1000 para evitar conflictos
    let productosCreados = 0;
    
    // Crear jabones s√≥lidos
    console.log(`   üßº Creando jabones s√≥lidos...`);
    for (const productoData of PRODUCTOS_JABONES_SOLIDOS) {
      const codigoBarras = generarCodigoBarrasEAN13(contadorCodigo++);
      
      const producto = await prisma.producto.create({
        data: {
          nombre: productoData.nombre,
          descripcion: `Jab√≥n s√≥lido natural - ${productoData.nombre.replace('JABON SOLIDO ', '')}`,
          precio: productoData.precio,
          codigoBarras: codigoBarras,
          categoriaId: categoriaSolidos.id,
          stockMinimo: 3,
          activo: true
        }
      });
      
      productosCreados++;
      console.log(`     ‚úÖ ${producto.nombre} - $${producto.precio}`);
    }
    
    // Crear jabones l√≠quidos
    console.log(`   üß¥ Creando jabones l√≠quidos...`);
    for (const productoData of PRODUCTOS_JABONES_LIQUIDOS) {
      const codigoBarras = generarCodigoBarrasEAN13(contadorCodigo++);
      
      const producto = await prisma.producto.create({
        data: {
          nombre: productoData.nombre,
          descripcion: `Jab√≥n l√≠quido arom√°tico - ${productoData.nombre.replace('JABON LIQUIDO ', '')}`,
          precio: productoData.precio,
          codigoBarras: codigoBarras,
          categoriaId: categoriaLiquidos.id,
          stockMinimo: 3,
          activo: true
        }
      });
      
      productosCreados++;
      console.log(`     ‚úÖ ${producto.nombre} - $${producto.precio}`);
    }
    
    console.log(`   üìä Total productos creados: ${productosCreados}`);
    return productosCreados;
  } catch (error) {
    console.error('‚ùå Error creando productos:', error);
    throw error;
  }
}

// Funci√≥n para solicitar confirmaci√≥n
function solicitarConfirmacion() {
  return new Promise((resolve) => {
    const readline = require('readline');
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    
    console.log('\n‚ö†Ô∏è Esta operaci√≥n ELIMINAR√Å categor√≠as y productos existentes');
    console.log('¬øEst√° seguro de continuar? (escriba "CONFIRMAR"):');
    
    rl.question('> ', (respuesta) => {
      rl.close();
      resolve(respuesta.trim() === 'CONFIRMAR');
    });
  });
}

// Funci√≥n para mostrar resumen final
async function mostrarResumenFinal() {
  console.log('\nüìä === RESUMEN POST-MIGRACI√ìN ===');
  
  try {
    // Verificar categor√≠as finales
    const categorias = await prisma.categoria.findMany({
      where: {
        nombre: { in: ['Jabones S√≥lidos', 'Jabones L√≠quidos'] }
      },
      include: {
        _count: { select: { productos: true } }
      }
    });
    
    console.log('üìÇ Categor√≠as creadas:');
    categorias.forEach(cat => {
      console.log(`   ‚úÖ ${cat.nombre}: ${cat._count.productos} productos`);
    });
    
    // Mostrar algunos productos de ejemplo
    const productosEjemplo = await prisma.producto.findMany({
      where: {
        categoria: {
          nombre: { in: ['Jabones S√≥lidos', 'Jabones L√≠quidos'] }
        }
      },
      include: { categoria: true },
      take: 5,
      orderBy: { nombre: 'asc' }
    });
    
    if (productosEjemplo.length > 0) {
      console.log('\nüì¶ Ejemplos de productos creados:');
      productosEjemplo.forEach(producto => {
        console.log(`   ‚Ä¢ ${producto.nombre} (${producto.categoria.nombre}) - $${producto.precio}`);
      });
    }
    
    // Total de categor√≠as en el sistema
    const totalCategorias = await prisma.categoria.count();
    const totalProductos = await prisma.producto.count({ where: { activo: true } });
    
    console.log(`\nüéØ Estado final del sistema:`);
    console.log(`   üìÇ Total categor√≠as: ${totalCategorias}`);
    console.log(`   üì¶ Total productos activos: ${totalProductos}`);
    
  } catch (error) {
    console.error('‚ùå Error mostrando resumen final:', error);
  }
}

// Funci√≥n principal
async function migrarCategoriasJabones(forzar = false) {
  try {
    mostrarBanner();
    
    // 1. Verificar datos existentes
    const verificacion = await verificarDatosExistentes();
    
    if (verificacion.totalProductosAfectados === 0 && verificacion.categoriasAEliminar.length === 0) {
      console.log('\n‚úÖ No hay categor√≠as obsoletas para eliminar');
    }
    
    // 2. Solicitar confirmaci√≥n si hay datos que eliminar
    if (!forzar && (verificacion.totalProductosAfectados > 0 || verificacion.categoriasAEliminar.length > 0)) {
      const confirmar = await solicitarConfirmacion();
      if (!confirmar) {
        console.log('\nüö´ Migraci√≥n cancelada por el usuario');
        return { success: false, mensaje: 'Cancelado por usuario' };
      }
    }
    
    // 3. Generar backup
    const archivoBackup = await generarBackup();
    
    // 4. Eliminar datos antiguos
    const eliminacion = await eliminarDatosAntiguos();
    
    // 5. Crear nuevas categor√≠as
    const categorias = await crearNuevasCategorias();
    
    // 6. Crear productos
    const productosCreados = await crearProductos(categorias);
    
    // 7. Mostrar resumen final
    await mostrarResumenFinal();
    
    console.log('\nüéâ === MIGRACI√ìN COMPLETADA EXITOSAMENTE ===');
    console.log(`üóëÔ∏è Eliminados: ${eliminacion.categoriasEliminadas} categor√≠as, ${eliminacion.productosEliminados} productos`);
    console.log(`‚ú® Creados: ${categorias.length} categor√≠as, ${productosCreados} productos`);
    
    if (archivoBackup) {
      console.log(`üíæ Backup disponible en: ${archivoBackup}`);
    }
    
    return {
      success: true,
      eliminados: eliminacion,
      creados: { categorias: categorias.length, productos: productosCreados },
      backup: archivoBackup
    };
    
  } catch (error) {
    console.error('\nüí• Error durante la migraci√≥n:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Funci√≥n de ayuda
function mostrarAyuda() {
  console.log(`
üìö Uso: node scripts/insertar/migrar-categorias-jabones.js [opciones]

üîß Opciones:
   --forzar         Ejecutar sin solicitar confirmaci√≥n
   --verificar      Solo verificar qu√© se eliminar√≠a (sin cambios)
   --ayuda          Mostrar esta ayuda

üìñ Ejemplos:
   # Migraci√≥n interactiva (recomendado)
   node scripts/insertar/migrar-categorias-jabones.js
   
   # Migraci√≥n autom√°tica
   node scripts/insertar/migrar-categorias-jabones.js --forzar
   
   # Solo verificar
   node scripts/insertar/migrar-categorias-jabones.js --verificar

üîÑ Qu√© hace este script:
   1. Elimina categor√≠as obsoletas: Aceites Esenciales, Aguas Arom√°ticas, etc.
   2. Crea nuevas categor√≠as: Jabones S√≥lidos y Jabones L√≠quidos
   3. Agrega ${PRODUCTOS_JABONES_SOLIDOS.length} jabones s√≥lidos y ${PRODUCTOS_JABONES_LIQUIDOS.length} jabones l√≠quidos
   4. Genera backup autom√°tico antes de cambios
   5. Asigna c√≥digos de barras √∫nicos EAN-13

üõ°Ô∏è Seguridad:
   - Genera backup antes de eliminar
   - Operaciones en transacciones
   - Confirmaci√≥n requerida para cambios destructivos
`);
}

// Ejecutar si es llamado directamente
if (require.main === module) {
  const args = process.argv.slice(2);
  
  if (args.includes('--ayuda') || args.includes('--help')) {
    mostrarAyuda();
    process.exit(0);
  }
  
  if (args.includes('--verificar')) {
    console.log('üîç === MODO VERIFICACI√ìN ===\n');
    verificarDatosExistentes()
      .then(() => {
        console.log('\n‚úÖ Verificaci√≥n completada. Use sin --verificar para ejecutar la migraci√≥n.');
        process.exit(0);
      })
      .catch((error) => {
        console.error('‚ùå Error en verificaci√≥n:', error);
        process.exit(1);
      });
  } else {
    const forzar = args.includes('--forzar');
    
    migrarCategoriasJabones(forzar)
      .then((resultado) => {
        if (resultado.success) {
          console.log('\nüèÅ Migraci√≥n finalizada correctamente');
        }
        process.exit(0);
      })
      .catch((error) => {
        console.error('\n‚ùå Error en migraci√≥n:', error);
        process.exit(1);
      });
  }
}

module.exports = { 
  migrarCategoriasJabones,
  verificarDatosExistentes
};