// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Usuarios y Roles
model User {
  id         String     @id @default(uuid())
  email      String     @unique
  name       String
  roleId     String
  role       Role       @relation(fields: [roleId], references: [id])
  sucursalId String?
  sucursal   Ubicacion? @relation(fields: [sucursalId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  // Relaciones existentes
  producciones           Production[]
  ventas                 Venta[]
  envios                 Envio[]
  contingencias          Contingencia[]
  movimientosStock       MovimientoStock[]
  conciliaciones         Conciliacion[]
  cajaEgresos            CajaEgreso[]
  reintentos             FacturaReintento[]
  puntoEquilibrioConfigs PuntoEquilibrioConfig[]
  configuracionesCierre ConfiguracionCierre[]
  movimientosStockInsumoPdv MovimientoStockInsumoPdv[]
  solicitudesInsumoPdv      SolicitudInsumoPdv[]
  egresosInsumoPdv          EgresoInsumoPdv[]
  recuperosFondo RecuperoFondo[]
  
  stockConfigs    StockConfigSucursal[]
  cargasStock     CargaMasivaStock[]
}

model Role {
  id          String @id @default(uuid())
  name        String @unique
  permissions Json // Array de permisos
  users       User[]
}

// Productos e Insumos
model Producto {
  id           String    @id @default(uuid())
  nombre       String
  descripcion  String?
  precio       Float
  codigoBarras String?   @unique
  imagen       String?
  categoriaId  String
  categoria    Categoria @relation(fields: [categoriaId], references: [id])

  // Para gestión de stock
  stockMinimo Int     @default(0)
  activo      Boolean @default(true)

  // Relaciones existentes
  stocks          Stock[]
  productoRecetas ProductoReceta[]
  itemsVenta      ItemVenta[]
  itemsEnvio      ItemEnvio[]
  
  // 🆕 NUEVAS RELACIONES
  stockConfigs    StockConfigSucursal[]
  cargasStock     CargaMasivaStockItem[]
}

model Insumo {
  id           String     @id @default(uuid())
  nombre       String
  descripcion  String?
  unidadMedida String // litro, kg, unidad, etc.
  stockMinimo  Float      @default(0)
  proveedorId  String?
  proveedor    Proveedor? @relation(fields: [proveedorId], references: [id])
  activo       Boolean    @default(true)

  // Relaciones
  stocks      Stock[]
  recetaItems RecetaItem[]
  itemsEnvio  ItemEnvio[]
}

model Categoria {
  id        String     @id @default(uuid())
  nombre    String     @unique
  imagen    String?    // 🆕 Campo para imagen de categoría
  productos Producto[]
}

model Proveedor {
  id        String   @id @default(uuid())
  nombre    String
  contacto  String?
  telefono  String?
  email     String?
  direccion String?
  activo    Boolean  @default(true)
  insumos   Insumo[]
}

// Recetas y Producción
model Receta {
  id          String  @id @default(uuid())
  nombre      String
  descripcion String?
  rendimiento Int // Cuántos productos finales genera

  // Relaciones
  items           RecetaItem[]
  productoRecetas ProductoReceta[]
  producciones    Production[]
}

model RecetaItem {
  id       String @id @default(uuid())
  recetaId String
  receta   Receta @relation(fields: [recetaId], references: [id])
  insumoId String
  insumo   Insumo @relation(fields: [insumoId], references: [id])
  cantidad Float // Cantidad del insumo necesaria
}

model ProductoReceta {
  id         String   @id @default(uuid())
  productoId String
  producto   Producto @relation(fields: [productoId], references: [id])
  recetaId   String
  receta     Receta   @relation(fields: [recetaId], references: [id])
}

model Production {
  id            String    @id @default(uuid())
  recetaId      String
  receta        Receta    @relation(fields: [recetaId], references: [id])
  cantidad      Int // Cuántos productos se fabricaron
  fechaInicio   DateTime  @default(now())
  fechaFin      DateTime?
  usuarioId     String
  usuario       User      @relation(fields: [usuarioId], references: [id])
  observaciones String?

  // Estado de la producción
  estado String // en_proceso, finalizada, con_contingencia

  // Relaciones
  contingencias Contingencia[]
}

// Stock
model Stock {
  id          String    @id @default(uuid())
  ubicacionId String
  ubicacion   Ubicacion @relation(fields: [ubicacionId], references: [id])

  // Puede ser producto o insumo (uno de los dos)
  productoId String?
  producto   Producto? @relation(fields: [productoId], references: [id])
  insumoId   String?
  insumo     Insumo?   @relation(fields: [insumoId], references: [id])

  cantidad Float
  version  Int   @default(0) // Para control optimista

  // Para auditoría
  ultimaActualizacion DateTime @default(now())

  // Relaciones con movimientos
  movimientos MovimientoStock[]
}

model MovimientoStock {
  id             String @id @default(uuid())
  stockId        String
  stock          Stock  @relation(fields: [stockId], references: [id])
  tipoMovimiento String // entrada, salida, ajuste
  cantidad       Float // siempre positivo, la dirección la define tipoMovimiento
  motivo         String // producción, venta, envío, ajuste manual, etc.

  // Referencias opcionales al origen del movimiento
  ventaId      String?
  envioId      String?
  produccionId String?
  fecha        DateTime @default(now())

  // Para auditoría
  usuarioId String?
  usuario   User?   @relation(fields: [usuarioId], references: [id])
}

// Ubicaciones (Fábrica y Sucursales)
model Ubicacion {
  id        String  @id @default(uuid())
  nombre    String
  tipo      String // fabrica, sucursal
  direccion String?
  telefono  String?
  activo    Boolean @default(true)

  facturasElectronicas FacturaElectronica[]
  configuracionAFIP    ConfiguracionAFIP?

  // Relaciones
  stocks        Stock[]
  enviosOrigen  Envio[] @relation("envioOrigen")
  enviosDestino Envio[] @relation("envioDestino")
  usuarios      User[]
  ventas        Venta[]

  // Añadir esta nueva relación
  conciliaciones Conciliacion[]
  contingencias  Contingencia[]

  puntoEquilibrioConfigs PuntoEquilibrioConfig[]

  configuracionCierre ConfiguracionCierre?

  impresoras ConfiguracionImpresora[]

  stocksInsumoPdv        StockInsumoPdv[]
  solicitudesInsumoPdv   SolicitudInsumoPdv[]
  enviosInsumoPdvOrigen  EnvioInsumoPdv[]     @relation("EnvioInsumoPdvOrigen")
  enviosInsumoPdvDestino EnvioInsumoPdv[]     @relation("EnvioInsumoPdvDestino")
  egresosInsumoPdv       EgresoInsumoPdv[]
  stockConfigs StockConfigSucursal[]
  cargasStock  CargaMasivaStock[]
}

// Distribución
model Envio {
  id             String    @id @default(uuid())
  origenId       String
  origen         Ubicacion @relation("envioOrigen", fields: [origenId], references: [id])
  destinoId      String
  destino        Ubicacion @relation("envioDestino", fields: [destinoId], references: [id])
  fechaCreacion  DateTime  @default(now())
  fechaEnvio     DateTime?
  fechaRecepcion DateTime?
  estado         String // pendiente, enviado, en_transito, recibido, con_contingencia, finalizado
  usuarioId      String
  usuario        User      @relation(fields: [usuarioId], references: [id])

  // Relaciones
  items         ItemEnvio[]
  contingencias Contingencia[]
}

model ItemEnvio {
  id      String @id @default(uuid())
  envioId String
  envio   Envio  @relation(fields: [envioId], references: [id])

  // Campo opcional para producto
  productoId String?
  producto   Producto? @relation(fields: [productoId], references: [id])

  // Campo opcional para insumo
  insumoId String?
  insumo   Insumo? @relation(fields: [insumoId], references: [id])

  cantidad         Int
  cantidadRecibida Int?
}

// Ventas y Punto de Venta
model Venta {
  id              String    @id @default(uuid())
  sucursalId      String
  sucursal        Ubicacion @relation(fields: [sucursalId], references: [id])
  fecha           DateTime  @default(now())
  total           Float
  descuento       Float     @default(0)
  codigoDescuento String?
  usuarioId       String
  usuario         User      @relation(fields: [usuarioId], references: [id])

  facturaElectronica FacturaElectronica?

  // Facturación
  facturada     Boolean @default(false)
  tipoFactura   String? 
  numeroFactura String?
  clienteNombre String?
  clienteCuit   String?

  // Relaciones
  items ItemVenta[]
  pagos Pago[]
}

model ItemVenta {
  id             String   @id @default(uuid())
  ventaId        String
  venta          Venta    @relation(fields: [ventaId], references: [id])
  productoId     String
  producto       Producto @relation(fields: [productoId], references: [id])
  cantidad       Int
  precioUnitario Float
  descuento      Float    @default(0)
}

model Pago {
  id                  String  @id @default(uuid())
  ventaId             String
  venta               Venta   @relation(fields: [ventaId], references: [id])
  medioPago           String // efectivo, tarjeta_credito, tarjeta_debito, transferencia, qr
  monto               Float
  referencia          String? // Número de transacción o referencia
  datosPago           Json? // Datos adicionales del pago
  periodoAcreditacion Int? // Días para acreditación (para oficina)
}

model CierreCaja {
  id              String    @id @default(uuid())
  sucursalId      String
  fechaApertura   DateTime  @default(now())
  fechaCierre     DateTime?
  usuarioApertura String
  usuarioCierre   String?
  montoInicial    Float
  montoFinal      Float?
  diferencia      Float?
  estado          String // abierto, cerrado, con_contingencia
  observaciones   String?

  // 🆕 NUEVOS CAMPOS PARA CONTEOS MANUALES
  conteoEfectivo     Float?  // Efectivo contado manualmente
  conteoTarjetaCredito Float? // Ventas con tarjeta de crédito (para verificación)
  conteoTarjetaDebito  Float? // Ventas con tarjeta de débito
  conteoTransferencia  Float? // Transferencias
  conteoQR            Float? // Pagos QR
  conteoOtros         Float? // Otros medios de pago

  montoFijoReferencia    Float   @default(10000) // Referencia del monto fijo al momento del cierre
  requiereRecuperoProximo Boolean @default(false) // Si el próximo turno requiere recupero
  alertaMontoInsuficiente String? // Mensaje de alerta si hay monto insuficiente
  esCierreConDiferencias  Boolean @default(false) // Si se cerró con el botón "resolver diferencias"
  razonCierreForzado     String? // Razón del cierre forzado si aplica

  // 🆕 CAMPOS PARA CONTROL DE EFECTIVO
  totalEgresos        Float  @default(0) // Total de egresos del turno
  efectivoEsperado    Float? // Efectivo que debería haber
  efectivoReal        Float? // Efectivo contado físicamente
  diferenciaEfectivo  Float? // Diferencia específica en efectivo
  
  // 🆕 CAMPOS PARA RECUPERO DE FONDO
  saldoPendienteAnterior Float @default(0) // Saldo negativo del turno anterior
  recuperoFondo          Float @default(0) // Monto a recuperar en este turno
  saldoPendienteActual   Float @default(0) // Saldo negativo generado en este turno
  recuperosAplicados RecuperoFondo[] @relation("RecuperoDestino")
  recuperosGenerados RecuperoFondo[] @relation("RecuperoOrigen")
  
  // 🆕 CAMPOS PARA SUGERENCIAS
  sugerenciaProximaApertura Float? // Monto sugerido para próxima apertura
  requiereRecupero          Boolean @default(false) // Si requiere recupero en próximo turno

  egresos CajaEgreso[]
  
  @@index([sucursalId, fechaApertura])
}

model RecuperoFondo {
  id              String   @id @default(uuid())
  cierreCajaId    String   // Caja donde se aplica el recupero
  cierreCajaOrigenId String // Caja que generó el saldo negativo
  monto           Float    // Monto recuperado
  fecha           DateTime @default(now())
  usuarioId       String
  observaciones   String?
  
  cierreCaja       CierreCaja @relation("RecuperoDestino", fields: [cierreCajaId], references: [id])
  cierreCajaOrigen CierreCaja @relation("RecuperoOrigen", fields: [cierreCajaOrigenId], references: [id])
  usuario          User       @relation(fields: [usuarioId], references: [id])
}

model Contingencia {
  id          String @id @default(uuid())
  titulo      String
  descripcion String

  // Origen de la contingencia
  origen String // fabrica, sucursal, oficina

  // Referencias opcionales según el origen
  produccionId  String?
  produccion    Production? @relation(fields: [produccionId], references: [id])
  envioId       String?
  envio         Envio?      @relation(fields: [envioId], references: [id])
  videoUrl      String? // Nuevo campo para videos
  mediaType     String? // 'image' o 'video'
  mediaExpiraEn DateTime? // Fecha de expiración unificada

  // Agregar campo tipo para mejor categorización
  tipo String? // producto, stock, caja, sistema, otro

  // Datos generales
  fechaCreacion   DateTime  @default(now())
  creadoPor       String
  usuario         User      @relation(fields: [creadoPor], references: [id])
  estado          String // pendiente, en_revision, resuelto, rechazado
  respuesta       String?
  fechaRespuesta  DateTime?
  resueltoPor     String?
  ajusteRealizado Boolean   @default(false)

  // Campo para marcar urgencia
  urgente Boolean @default(false)

  imagenUrl      String?
  imagenExpiraEn DateTime?

  ubicacionId String?
  ubicacion   Ubicacion? @relation(fields: [ubicacionId], references: [id])

  // Referencia a conciliación
  conciliacionId String?
  conciliacion   Conciliacion? @relation(fields: [conciliacionId], references: [id])
}

// Codigos de descuento
model CodigoDescuento {
  id            String    @id @default(uuid())
  codigo        String    @unique
  descripcion   String?
  tipoDescuento String // porcentaje, monto_fijo
  valor         Float
  fechaInicio   DateTime
  fechaFin      DateTime?
  usoMaximo     Int?
  usosActuales  Int       @default(0)
  activo        Boolean   @default(true)
}

model Conciliacion {
  id            String         @id @default(uuid())
  sucursalId    String
  sucursal      Ubicacion      @relation(fields: [sucursalId], references: [id])
  fecha         DateTime       @default(now())
  estado        String // pendiente, completada, con_contingencia
  usuarioId     String
  usuario       User           @relation(fields: [usuarioId], references: [id])
  detalles      Json? // Array de productos y cantidades
  observaciones String?
  contingencias Contingencia[]
}

model FacturaElectronica {
  id              String             @id @default(uuid())
  ventaId         String             @unique
  venta           Venta              @relation(fields: [ventaId], references: [id])
  sucursalId      String
  sucursal        Ubicacion          @relation(fields: [sucursalId], references: [id])
  tipoComprobante String // "A", "B", etc.
  puntoVenta      Int
  numeroFactura   Int
  fechaEmision    DateTime
  cae             String?
  vencimientoCae  DateTime?
  estado          String // "pendiente", "procesando", "completada", "error"
  xml             String? // XML enviado a AFIP
  respuestaAFIP   Json? // Respuesta completa de AFIP
  error           String?
  qrData          String? // Datos para el código QR de AFIP
  logs            String?            @db.Text // Añadir este campo para almacenar logs extensos
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  reintentos      FacturaReintento[]
}

model ConfiguracionAFIP {
  id         String    @id @default(uuid())
  sucursalId String    @unique
  sucursal   Ubicacion @relation(fields: [sucursalId], references: [id])
  cuit       String
  puntoVenta Int
  activo     Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model CajaEgreso {
  id           String     @id @default(uuid())
  cierreCajaId String
  cierreCaja   CierreCaja @relation(fields: [cierreCajaId], references: [id])
  monto        Float
  motivo       String // "adelanto_sueldo", "compra_insumos", "libreria", "paqueteria", "otros"
  detalles     String?
  fecha        DateTime   @default(now())
  usuarioId    String
  usuario      User       @relation(fields: [usuarioId], references: [id])
}

model TokenAFIP {
  id             String   @id @default(uuid())
  cuit           String
  token          String   @db.Text
  sign           String   @db.Text
  expirationTime DateTime
  createdAt      DateTime @default(now())
}

model FacturaReintento {
  id             String             @id @default(uuid())
  facturaId      String
  factura        FacturaElectronica @relation(fields: [facturaId], references: [id])
  usuarioId      String
  usuario        User               @relation(fields: [usuarioId], references: [id])
  estadoAnterior String
  motivo         String?
  resultado      String // 'iniciado', 'exitoso', 'fallido'
  error          String?            @db.Text
  logs           String?            @db.Text
  cae            String?
  iniciadoEn     DateTime           @default(now())
  completadoEn   DateTime?
}

model PuntoEquilibrioConfig {
  id              String    @id @default(uuid())
  sucursalId      String
  sucursal        Ubicacion @relation(fields: [sucursalId], references: [id])
  costosFijos     Float
  costosVariables Float // Porcentaje
  metaMensual     Float
  mes             Int // 1-12
  año            Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  creadoPor       String
  usuario         User      @relation(fields: [creadoPor], references: [id])

  @@unique([sucursalId, mes, año])
}

model InsumoPdv {
  id           String   @id @default(uuid())
  nombre       String
  descripcion  String?
  unidadMedida String // rollo, paquete, unidad, etc.
  stockMinimo  Float    @default(0)
  activo       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relaciones
  stocks           StockInsumoPdv[]
  itemsEnvio       ItemEnvioInsumoPdv[]
  itemsSolicitudes ItemSolicitudInsumoPdv[]
  egresos          EgresoInsumoPdv[]
}

// Stock de insumos PDV por ubicación
model StockInsumoPdv {
  id                  String    @id @default(uuid())
  insumoPdvId         String
  insumoPdv           InsumoPdv @relation(fields: [insumoPdvId], references: [id])
  ubicacionId         String
  ubicacion           Ubicacion @relation(fields: [ubicacionId], references: [id])
  cantidad            Float
  version             Int       @default(0)
  ultimaActualizacion DateTime  @default(now())

  // Relaciones
  movimientos MovimientoStockInsumoPdv[]

  @@unique([insumoPdvId, ubicacionId])
}

// Movimientos de stock de insumos PDV
model MovimientoStockInsumoPdv {
  id             String         @id @default(uuid())
  stockId        String
  stock          StockInsumoPdv @relation(fields: [stockId], references: [id])
  tipoMovimiento String // entrada, salida, ajuste
  cantidad       Float
  motivo         String
  fecha          DateTime       @default(now())
  usuarioId      String
  usuario        User           @relation(fields: [usuarioId], references: [id])

  // Referencias opcionales
  envioId     String?
  solicitudId String?
}

// Solicitudes de insumos PDV desde sucursales a admin
model SolicitudInsumoPdv {
  id             String    @id @default(uuid())
  sucursalId     String
  sucursal       Ubicacion @relation(fields: [sucursalId], references: [id])
  usuarioId      String
  usuario        User      @relation(fields: [usuarioId], references: [id])
  estado         String // pendiente, aprobada, rechazada, enviada, recibida
  observaciones  String?
  fechaCreacion  DateTime  @default(now())
  fechaRespuesta DateTime?
  respondioPor   String?

  // Relaciones
  items ItemSolicitudInsumoPdv[]
  envio EnvioInsumoPdv?
}

// Items de solicitud de insumos PDV
model ItemSolicitudInsumoPdv {
  id                 String             @id @default(uuid())
  solicitudId        String
  solicitud          SolicitudInsumoPdv @relation(fields: [solicitudId], references: [id])
  insumoPdvId        String
  insumoPdv          InsumoPdv          @relation(fields: [insumoPdvId], references: [id])
  cantidadSolicitada Float
  cantidadAprobada   Float?
  observaciones      String?
}

// Envíos de insumos PDV
model EnvioInsumoPdv {
  id               String             @id @default(uuid())
  solicitudId      String             @unique
  solicitud        SolicitudInsumoPdv @relation(fields: [solicitudId], references: [id])
  origenId         String // Siempre será desde admin/almacén
  origen           Ubicacion          @relation("EnvioInsumoPdvOrigen", fields: [origenId], references: [id])
  destinoId        String
  destino          Ubicacion          @relation("EnvioInsumoPdvDestino", fields: [destinoId], references: [id])
  estado           String // pendiente, enviado, en_transito, recibido
  fechaCreacion    DateTime           @default(now())
  fechaEnvio       DateTime?
  fechaRecepcion   DateTime?
  usuarioEnvio     String?
  usuarioRecepcion String?
  observaciones    String?

  // Relaciones
  items ItemEnvioInsumoPdv[]
}

// Items de envío de insumos PDV
model ItemEnvioInsumoPdv {
  id               String         @id @default(uuid())
  envioId          String
  envio            EnvioInsumoPdv @relation(fields: [envioId], references: [id])
  insumoPdvId      String
  insumoPdv        InsumoPdv      @relation(fields: [insumoPdvId], references: [id])
  cantidad         Float
  cantidadRecibida Float?
}

// Egresos de insumos PDV desde el punto de venta
model EgresoInsumoPdv {
  id            String    @id @default(uuid())
  sucursalId    String
  sucursal      Ubicacion @relation(fields: [sucursalId], references: [id])
  insumoPdvId   String
  insumoPdv     InsumoPdv @relation(fields: [insumoPdvId], references: [id])
  cantidad      Float
  motivo        String // uso_normal, perdida, daño, etc.
  usuarioId     String
  usuario       User      @relation(fields: [usuarioId], references: [id])
  fecha         DateTime  @default(now())
  observaciones String?
}

model ConfiguracionImpresora {
  id            String   @id @default(uuid())
  nombre        String
  tipo          String   // thermal, laser, inkjet
  sucursalId    String
  sucursal      Ubicacion @relation(fields: [sucursalId], references: [id])
  esPorDefecto  Boolean  @default(false)
  configuracion Json     // { paperWidth, autocut, encoding, etc. }
  activa        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([sucursalId, nombre])
  @@map("configuracion_impresora")
}

model ConfiguracionCierre {
  id          String    @id @default(uuid())
  sucursalId  String    @unique
  sucursal    Ubicacion @relation(fields: [sucursalId], references: [id])
  montoFijo   Float     @default(10000) // Monto fijo por defecto $10,000
  activo      Boolean   @default(true)
  creadoPor   String
  usuario     User      @relation(fields: [creadoPor], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("configuracion_cierre")
}

// Agregar estos modelos al final de tu schema.prisma

// Configuración de stock por sucursal
model StockConfigSucursal {
  id              String    @id @default(uuid())
  productoId      String
  producto        Producto  @relation(fields: [productoId], references: [id], onDelete: Cascade)
  sucursalId      String
  sucursal        Ubicacion @relation(fields: [sucursalId], references: [id], onDelete: Cascade)
  stockMaximo     Float     @default(0)
  stockMinimo     Float     @default(0)
  puntoReposicion Float     @default(0) // Punto en el que se debe reponer
  activo          Boolean   @default(true)
  creadoPor       String
  usuario         User      @relation(fields: [creadoPor], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@unique([productoId, sucursalId])
  @@index([sucursalId])
  @@index([productoId])
  @@map("stock_config_sucursal")
}

model CargaMasivaStock {
  id            String              @id @default(uuid())
  nombre        String              // Nombre descriptivo de la carga
  descripcion   String?
  sucursalId    String
  sucursal      Ubicacion           @relation(fields: [sucursalId], references: [id])
  usuarioId     String
  usuario       User                @relation(fields: [usuarioId], references: [id])
  estado        String              @default("procesando") // procesando, completado, completado_con_errores, error
  totalItems    Int                 @default(0)
  itemsProcesados Int               @default(0)
  itemsErrores  Int                 @default(0)
  archivoNombre String?
  observaciones String?
  fechaInicio   DateTime            @default(now())
  fechaFin      DateTime?
  
  // Relación con los items de la carga
  items         CargaMasivaStockItem[]
  
  @@index([sucursalId])
  @@index([usuarioId])
  @@index([fechaInicio])
  @@map("carga_masiva_stock")
}

// Items individuales de una carga masiva
model CargaMasivaStockItem {
  id              String            @id @default(uuid())
  cargaId         String
  carga           CargaMasivaStock  @relation(fields: [cargaId], references: [id], onDelete: Cascade)
  productoId      String?
  producto        Producto?         @relation(fields: [productoId], references: [id])
  codigoBarras    String?           // Para identificar producto por código
  nombreProducto  String?           // Para identificar producto por nombre
  cantidadCargar  Float
  cantidadAnterior Float?          // Stock anterior a la carga
  cantidadFinal   Float?           // Stock final después de la carga
  estado          String           @default("pendiente") // pendiente, procesado, error
  error           String?          // Mensaje de error si aplica
  procesadoEn     DateTime?
  
  @@index([cargaId])
  @@index([productoId])
  @@map("carga_masiva_stock_item")
}

// Alertas automáticas de stock
model AlertaStock {
  id              String    @id @default(uuid())
  productoId      String
  producto        Producto  @relation(fields: [productoId], references: [id])
  sucursalId      String
  sucursal        Ubicacion @relation(fields: [sucursalId], references: [id])
  tipoAlerta      String    // critico, bajo, exceso, reposicion
  mensaje         String
  stockActual     Float
  stockReferencia Float     // Puede ser mínimo, máximo o punto de reposición
  activa          Boolean   @default(true)
  vistaPor        String?   // Usuario que vio la alerta
  fechaVista      DateTime?
  createdAt       DateTime  @default(now())
  
  @@index([sucursalId, activa])
  @@index([productoId])
  @@index([tipoAlerta])
  @@map("alerta_stock")
}
