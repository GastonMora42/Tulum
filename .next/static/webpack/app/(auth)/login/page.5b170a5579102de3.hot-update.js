"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/(auth)/login/page",{

/***/ "(app-pages-browser)/./src/server/services/auth/cognitoService.ts":
/*!****************************************************!*\
  !*** ./src/server/services/auth/cognitoService.ts ***!
  \****************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CognitoAuthService: () => (/* binding */ CognitoAuthService),\n/* harmony export */   cognitoService: () => (/* binding */ cognitoService)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_client_cognito_identity_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/client-cognito-identity-provider */ \"(app-pages-browser)/./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/SignUpCommand.js\");\n/* harmony import */ var _aws_sdk_client_cognito_identity_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/client-cognito-identity-provider */ \"(app-pages-browser)/./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/ConfirmSignUpCommand.js\");\n/* harmony import */ var _aws_sdk_client_cognito_identity_provider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/client-cognito-identity-provider */ \"(app-pages-browser)/./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/ResendConfirmationCodeCommand.js\");\n/* harmony import */ var _aws_sdk_client_cognito_identity_provider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @aws-sdk/client-cognito-identity-provider */ \"(app-pages-browser)/./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/InitiateAuthCommand.js\");\n/* harmony import */ var _aws_sdk_client_cognito_identity_provider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @aws-sdk/client-cognito-identity-provider */ \"(app-pages-browser)/./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/GetUserCommand.js\");\n/* harmony import */ var _aws_sdk_client_cognito_identity_provider__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @aws-sdk/client-cognito-identity-provider */ \"(app-pages-browser)/./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/GlobalSignOutCommand.js\");\n/* harmony import */ var _aws_sdk_client_cognito_identity_provider__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @aws-sdk/client-cognito-identity-provider */ \"(app-pages-browser)/./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/commands/AdminCreateUserCommand.js\");\n/* harmony import */ var _aws_sdk_client_cognito_identity_provider__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @aws-sdk/client-cognito-identity-provider */ \"(app-pages-browser)/./node_modules/@aws-sdk/client-cognito-identity-provider/dist-es/CognitoIdentityProviderClient.js\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"(app-pages-browser)/./node_modules/next/dist/compiled/crypto-browserify/index.js\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/../../../node_modules/process/browser.js\");\n// src/server/services/auth/cognitoService.ts\n\n\nclass CognitoAuthService {\n    // Método para calcular el SECRET_HASH\n    // En cognitoService.ts\n    calculateSecretHash(username) {\n        if (!this.clientSecret) {\n            console.error('Cliente secret no está configurado');\n            throw new Error('Client secret is not configured');\n        }\n        // El formato correcto es USERNAME + CLIENT_ID\n        const message = username + this.clientId;\n        const hmac = crypto__WEBPACK_IMPORTED_MODULE_0__.createHmac('sha256', this.clientSecret);\n        hmac.update(message);\n        return hmac.digest('base64');\n    }\n    // Registrar un nuevo usuario\n    async registerUser(params) {\n        try {\n            const { email, password, name } = params;\n            // Crear el usuario en Cognito\n            const signUpCommand = new _aws_sdk_client_cognito_identity_provider__WEBPACK_IMPORTED_MODULE_1__.SignUpCommand({\n                ClientId: this.clientId,\n                Username: email,\n                Password: password,\n                SecretHash: this.calculateSecretHash(email),\n                UserAttributes: [\n                    {\n                        Name: 'email',\n                        Value: email\n                    },\n                    {\n                        Name: 'name',\n                        Value: name\n                    }\n                ]\n            });\n            const response = await this.client.send(signUpCommand);\n            return {\n                success: true,\n                userId: response.UserSub,\n                message: 'Usuario registrado correctamente. Por favor, verifique su correo electrónico para completar el registro.'\n            };\n        } catch (error) {\n            console.error('Error al registrar usuario:', error);\n            // Manejar errores específicos\n            if (error.name === 'UsernameExistsException') {\n                return {\n                    success: false,\n                    message: 'El correo electrónico ya está registrado.'\n                };\n            }\n            if (error.name === 'InvalidPasswordException') {\n                return {\n                    success: false,\n                    message: 'La contraseña no cumple con los requisitos de seguridad.'\n                };\n            }\n            throw error;\n        }\n    }\n    // Confirmar el registro con el código de verificación\n    async confirmRegistration(email, confirmationCode) {\n        try {\n            const command = new _aws_sdk_client_cognito_identity_provider__WEBPACK_IMPORTED_MODULE_2__.ConfirmSignUpCommand({\n                ClientId: this.clientId,\n                Username: email,\n                ConfirmationCode: confirmationCode,\n                SecretHash: this.calculateSecretHash(email) // Añadir SECRET_HASH\n            });\n            await this.client.send(command);\n            return {\n                success: true,\n                message: 'Registro confirmado correctamente.'\n            };\n        } catch (error) {\n            console.error('Error al confirmar registro:', error);\n            if (error.name === 'CodeMismatchException') {\n                return {\n                    success: false,\n                    message: 'El código de verificación es incorrecto.'\n                };\n            }\n            if (error.name === 'ExpiredCodeException') {\n                return {\n                    success: false,\n                    message: 'El código de verificación ha expirado.'\n                };\n            }\n            return {\n                success: false,\n                message: 'Error al confirmar el registro. Por favor, intente nuevamente.'\n            };\n        }\n    }\n    // Reenviar código de confirmación\n    async resendConfirmationCode(email) {\n        try {\n            const command = new _aws_sdk_client_cognito_identity_provider__WEBPACK_IMPORTED_MODULE_3__.ResendConfirmationCodeCommand({\n                ClientId: this.clientId,\n                Username: email,\n                SecretHash: this.calculateSecretHash(email) // Añadir SECRET_HASH\n            });\n            await this.client.send(command);\n            return {\n                success: true,\n                message: 'Se ha enviado un nuevo código de verificación a su correo electrónico.'\n            };\n        } catch (error) {\n            console.error('Error al reenviar código:', error);\n            return {\n                success: false,\n                message: 'Error al reenviar el código de verificación. Por favor, intente nuevamente.'\n            };\n        }\n    }\n    // Login con Cognito\n    // En login de cognitoService.ts\n    async login(credentials) {\n        try {\n            var _this_userPoolId, _this_clientId;\n            const { email, password } = credentials;\n            console.log(\"1. Iniciando login con Cognito para:\", email);\n            // Verificar que tenemos los valores de configuración\n            console.log(\"2. Verificando configuración:\", {\n                region: process.env.AWS_REGION,\n                userPoolId: ((_this_userPoolId = this.userPoolId) === null || _this_userPoolId === void 0 ? void 0 : _this_userPoolId.substring(0, 5)) + '...',\n                clientId: ((_this_clientId = this.clientId) === null || _this_clientId === void 0 ? void 0 : _this_clientId.substring(0, 5)) + '...',\n                hasSecret: !!this.clientSecret\n            });\n            // Si usamos secreto, calcular SECRET_HASH\n            let secretHash;\n            if (this.clientSecret) {\n                try {\n                    secretHash = this.calculateSecretHash(email);\n                    console.log(\"3. SECRET_HASH calculado correctamente\");\n                } catch (error) {\n                    console.error(\"Error al calcular SECRET_HASH:\", error);\n                    throw error;\n                }\n            }\n            // Crear parámetros de autenticación\n            const authParams = {\n                USERNAME: email,\n                PASSWORD: password\n            };\n            // Añadir SECRET_HASH si existe\n            if (secretHash) {\n                authParams.SECRET_HASH = secretHash;\n            }\n            console.log(\"4. Parámetros de autenticación preparados\");\n            const command = new _aws_sdk_client_cognito_identity_provider__WEBPACK_IMPORTED_MODULE_4__.InitiateAuthCommand({\n                AuthFlow: \"USER_PASSWORD_AUTH\",\n                ClientId: this.clientId,\n                AuthParameters: authParams\n            });\n            console.log(\"5. Enviando solicitud a Cognito...\");\n            const response = await this.client.send(command);\n            console.log(\"6. Respuesta recibida de Cognito:\", (response === null || response === void 0 ? void 0 : response.AuthenticationResult) ? \"Con tokens\" : \"Sin tokens\", (response === null || response === void 0 ? void 0 : response.ChallengeName) ? \"Desaf\\xedo: \".concat(response.ChallengeName) : \"Sin desafío\");\n            if (!response.AuthenticationResult) {\n                if (response.ChallengeName) {\n                    throw new Error(\"Se requiere completar desaf\\xedo: \".concat(response.ChallengeName));\n                }\n                throw new Error('Error de autenticación: No se recibieron tokens de autenticación');\n            }\n            // Obtener información del usuario autenticado\n            console.log(\"7. Obteniendo información del usuario...\");\n            const userInfo = await this.getUserInfo(response.AuthenticationResult.AccessToken);\n            console.log(\"8. Información de usuario obtenida:\", userInfo.email);\n            return {\n                user: userInfo,\n                accessToken: response.AuthenticationResult.AccessToken,\n                refreshToken: response.AuthenticationResult.RefreshToken,\n                idToken: response.AuthenticationResult.IdToken,\n                expiresIn: response.AuthenticationResult.ExpiresIn || 3600\n            };\n        } catch (error) {\n            console.error('Error detallado en login Cognito:', error);\n            if (error.$metadata) {\n                console.error('Metadatos del error:', error.$metadata);\n            }\n            if (error.__type) {\n                console.error('Tipo de error AWS:', error.__type);\n            }\n            if (error.message) {\n                console.error('Mensaje de error:', error.message);\n            }\n            throw error;\n        }\n    }\n    // Obtener información del usuario desde Cognito\n    async getUserInfo(accessToken) {\n        try {\n            var _attributes_find, _attributes_find1, _attributes_find2;\n            const command = new _aws_sdk_client_cognito_identity_provider__WEBPACK_IMPORTED_MODULE_5__.GetUserCommand({\n                AccessToken: accessToken\n            });\n            const response = await this.client.send(command);\n            // Mapear atributos de Cognito a nuestro modelo de usuario\n            const attributes = response.UserAttributes || [];\n            const email = ((_attributes_find = attributes.find((attr)=>attr.Name === 'email')) === null || _attributes_find === void 0 ? void 0 : _attributes_find.Value) || '';\n            const name = ((_attributes_find1 = attributes.find((attr)=>attr.Name === 'name')) === null || _attributes_find1 === void 0 ? void 0 : _attributes_find1.Value) || '';\n            const sub = ((_attributes_find2 = attributes.find((attr)=>attr.Name === 'sub')) === null || _attributes_find2 === void 0 ? void 0 : _attributes_find2.Value) || '';\n            // Aquí deberíamos obtener el usuario de nuestra base de datos\n            // usando el sub como identificador externo\n            // Por ahora, devolvemos un usuario básico\n            return {\n                id: sub,\n                email,\n                name,\n                roleId: 'user',\n                createdAt: new Date(),\n                updatedAt: new Date(),\n                sucursalId: null\n            };\n        } catch (error) {\n            console.error('Error al obtener info de usuario:', error);\n            throw error;\n        }\n    }\n    // Cerrar sesión\n    async logout(accessToken) {\n        try {\n            const command = new _aws_sdk_client_cognito_identity_provider__WEBPACK_IMPORTED_MODULE_6__.GlobalSignOutCommand({\n                AccessToken: accessToken\n            });\n            await this.client.send(command);\n        } catch (error) {\n            console.error('Error al cerrar sesión:', error);\n            throw error;\n        }\n    }\n    // Refrescar token\n    // En src/server/services/auth/cognitoService.ts\n    async refreshToken(refreshToken) {\n        try {\n            // Para el refresh token necesitamos conocer el username\n            // Intentar extraer el username del token (normalmente estará en el payload)\n            let username = '';\n            try {\n                // Intentar extraer del payload del JWT\n                const tokenParts = refreshToken.split('.');\n                if (tokenParts.length >= 2) {\n                    const payload = JSON.parse(atob(tokenParts[1]));\n                    username = payload.username || payload.email || '';\n                }\n            } catch (e) {\n                console.error('No se pudo extraer username del token:', e);\n                // Si no se puede extraer, usar un valor almacenado en localStorage\n                if (typeof localStorage !== 'undefined') {\n                    username = localStorage.getItem('userEmail') || '';\n                }\n            }\n            // Si no tenemos username, no podemos generar SECRET_HASH\n            if (!username && this.clientSecret) {\n                throw new Error('Se requiere el username para el refresh token cuando se usa client secret');\n            }\n            // Parámetros para el refresh token\n            const authParams = {\n                REFRESH_TOKEN: refreshToken\n            };\n            // Añadir SECRET_HASH si tenemos username y clientSecret\n            if (username && this.clientSecret) {\n                authParams.SECRET_HASH = this.calculateSecretHash(username);\n            }\n            const command = new _aws_sdk_client_cognito_identity_provider__WEBPACK_IMPORTED_MODULE_4__.InitiateAuthCommand({\n                AuthFlow: \"REFRESH_TOKEN_AUTH\",\n                ClientId: this.clientId,\n                AuthParameters: authParams\n            });\n            const response = await this.client.send(command);\n            if (!response.AuthenticationResult) {\n                throw new Error('Error al refrescar token');\n            }\n            return {\n                accessToken: response.AuthenticationResult.AccessToken,\n                idToken: response.AuthenticationResult.IdToken,\n                refreshToken: refreshToken,\n                expiresIn: response.AuthenticationResult.ExpiresIn || 3600\n            };\n        } catch (error) {\n            console.error('Error al refrescar token:', error);\n            throw error;\n        }\n    }\n    // Crear usuario (solo admin)\n    async createUser(user) {\n        try {\n            const command = new _aws_sdk_client_cognito_identity_provider__WEBPACK_IMPORTED_MODULE_7__.AdminCreateUserCommand({\n                UserPoolId: this.userPoolId,\n                Username: user.email,\n                TemporaryPassword: user.password,\n                UserAttributes: [\n                    {\n                        Name: 'email',\n                        Value: user.email\n                    },\n                    {\n                        Name: 'email_verified',\n                        Value: 'true'\n                    },\n                    {\n                        Name: 'name',\n                        Value: user.name\n                    },\n                    {\n                        Name: 'custom:role',\n                        Value: user.roleId\n                    }\n                ]\n            });\n            await this.client.send(command);\n        // Aquí deberíamos crear también el usuario en nuestra BD\n        // y vincular el id de Cognito\n        } catch (error) {\n            console.error('Error al crear usuario:', error);\n            throw error;\n        }\n    }\n    constructor(){\n        this.client = new _aws_sdk_client_cognito_identity_provider__WEBPACK_IMPORTED_MODULE_8__.CognitoIdentityProviderClient({\n            region: process.env.AWS_REGION\n        });\n        this.userPoolId = process.env.COGNITO_USER_POOL_ID;\n        this.clientId = process.env.COGNITO_CLIENT_ID;\n        this.clientSecret = process.env.COGNITO_CLIENT_SECRET;\n    }\n}\n// Singleton para uso en la aplicación\nconst cognitoService = new CognitoAuthService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/server/services/auth/cognitoService.ts\n"));

/***/ })

});